// @flow

export interface AnyAction {
    type: any;
    [extraProps: string]: any;
}
export interface Action<P> {
    type: string | Symbol;
    payload: P;
}
export interface PayloadActionCreator<P> {
    (payload: P): Action<P>;
    type: string | Symbol;
}
export interface EnptyActionCreator {
    (): Action<void>;
    type: string | Symbol;
}
export interface OptionalActionCreator<P> {
    (payload?: P): Action<P | void>;
    type: string | Symbol;
}
export type ReducerFragment<S, P> = (state: S, payload: P) => S;
export interface CreateEnptyActionCreator<S> {
    (reducer: ReducerFragment<S, void>): EnptyActionCreator;
    (type: string | Symbol, reducer: ReducerFragment<S, void>): EnptyActionCreator;
}
export interface CreatePayloadActionCreator<S> {
    <P>(reducer: ReducerFragment<S, P>): PayloadActionCreator<P>;
    <P>(type: string | Symbol, reducer: ReducerFragment<S, P>): PayloadActionCreator<P>;
}
export type CreateAction<S> = CreateEnptyActionCreator<S> & CreatePayloadActionCreator<S>
declare export default function ActionReducer<S>(initState: S, prefix?: string): {
    createAction: CreateAction<S>;
    reducer: (state: S | void, action: AnyAction) => S;
}
